#!/bin/bash

# Script Authored By: Sh M Hassan Ali (23959698) UWA MIT
# Assignment 2 - Open Source Tools and Scripting

# This script uses data from the cleaned input file to answer the four research questions listed below:
# What is the most popular domain and most popular mechanics across the set of games?
# What is the correlation between publication year and average rating?
# What is the correlation between game complexity and average rating?

# Check for correct usage
if [ "$#" -ne 1 ]; then
  echo "Usage: $0 <cleaned_file.tsv>" >&2
  exit 1
fi

file="$1"

# Check that file exists and is readable
if [ ! -f "$file" ]; then
    echo "Error: File '$file' does not exist." >&2
    exit 1
fi

if [ ! -r "$file" ]; then
    echo "Error: File '$file' is not readable." >&2
    exit 1
fi

# Check that file ends with .tsv
if [[ "$file" != *.tsv ]]; then
    echo "Error: Input file must have a .tsv extension." >&2
    exit 1
fi

# Use of awk to calculate highest count and correlation for simplicity
awk -F'\t' '
NR==1 {
  # Identify fields by header names
  for(i=1; i<=NF; i++) {
    if($i=="Year Published") year_idx=i;
    else if($i=="Rating Average") rating_idx=i;
    else if($i=="Complexity Average") complexity_idx=i;
    else if($i=="Mechanics") mechanics_idx=i;
    else if($i=="Domains") domains_idx=i;
  }
  next
}

NR>1 {
  # Count mechanics (split by comma)
  if ($mechanics_idx != "") {
    n = split($mechanics_idx, m_arr, ",")
    for(i=1; i<=n; i++) {
      gsub(/^ +| +$/, "", m_arr[i]) # trim spaces
      if(m_arr[i] ~ /[a-zA-Z]/) 
      mechanics_count[m_arr[i]]++
    }
  }

  # Count domains (split by comma)
  if ($domains_idx != "") {
    n = split($domains_idx, d_arr, ",")
    for(i=1; i<=n; i++) {
      gsub(/^ +| +$/, "", d_arr[i]) # trim spaces
      if(d_arr[i] ~ /[a-zA-Z]/)
      domain_count[d_arr[i]]++
    }
  }

  # Store values for correlation if numeric and not empty
  year = $year_idx + 0
  rating = $rating_idx + 0
  complexity = $complexity_idx + 0

  if(year > 0 && rating > 0 && complexity > 0) {
    years[NR] = year
    ratings[NR] = rating
    complexities[NR] = complexity
    count++
  }
}

END {
  # Find most popular mechanic
  max_mech_count = 0
  max_mech = ""
  for(m in mechanics_count) {
    if(mechanics_count[m] > max_mech_count) {
      max_mech_count = mechanics_count[m]
      max_mech = m
    }
  }

  # Find most popular domain
  max_dom_count = 0
  max_dom = ""
  for(d in domain_count) {
    if(domain_count[d] > max_dom_count) {
      max_dom_count = domain_count[d]
      max_dom = d
    }
  }

  print "The most popular game mechanics is " max_mech " found in " max_mech_count " games"
  print "The most popular game domain is " max_dom " found in " max_dom_count " games"

  # Calculate Pearson correlations
  sum_x = sum_y = sum_x2 = sum_y2 = sum_xy = 0

  # Year vs Rating
  for(i in years) {
    x = years[i]
    y = ratings[i]
    sum_x += x
    sum_y += y
    sum_x2 += x*x
    sum_y2 += y*y
    sum_xy += x*y
  }

  n = count
  numerator = sum_xy - (sum_x*sum_y)/n
  denominator = sqrt( (sum_x2 - (sum_x*sum_x)/n) * (sum_y2 - (sum_y*sum_y)/n) )
  corr_year_rating = (denominator != 0) ? numerator/denominator : 0

  # Complexity vs Rating
  sum_x = sum_y = sum_x2 = sum_y2 = sum_xy = 0
  for(i in complexities) {
    x = complexities[i]
    y = ratings[i]
    sum_x += x
    sum_y += y
    sum_x2 += x*x
    sum_y2 += y*y
    sum_xy += x*y
  }

  numerator = sum_xy - (sum_x*sum_y)/n
  denominator = sqrt( (sum_x2 - (sum_x*sum_x)/n) * (sum_y2 - (sum_y*sum_y)/n) )
  corr_complexity_rating = (denominator != 0) ? numerator/denominator : 0

  printf "The correlation between the year of publication and the average rating is %.3f\n", corr_year_rating
  printf "The correlation between the complexity of a game and its average rating is %.3f\n", corr_complexity_rating
}
' "$file"


# Script Authored By: Sh M Hassan Ali (23959698) UWA MIT
# Assignment 2 - Open Source Tools and Scripting

