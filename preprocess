#!/bin/bash

# This script given a text file sends to standard output a cleaned version of the 
# input file, where the following transformations have taken place:
# - Convert the semicolon separator to the  <tab> character
# - Convert the Microsoft line endings to Unix line endings
# - Change format of floating-point numbers to use ‘.’ rather than ‘,’ as the 
#   decimal point.
# - Deal with non-ASCII characters by deleting them from the output. 
# - For ID column searching the column for largest number, and then continue 
#   numbering past that.
# - Other empty cells are being replaced with 0

# Correct Usage check
if [ "$#" -ne 1 ]; then
    echo "Usage: $0 <input_file>" >&2
    exit 1
fi

input="$1"

# Searching the ID column for largest number
max_id=$(awk -F';' 'NR > 1 && $1 ~ /^[0-9]+$/ && $1 > max { max = $1 } END { print max+0 }' "$input")
next_id=$((max_id + 1))

awk -v OFS='\t' -v next_id="$next_id" '
BEGIN {
    FS = ";"
}
{
    # Clean all fields
    for (i = 1; i <= NF; i++) {
        gsub(/\r/, "", $i)              # Removing carriage returns
        gsub(/[^\x00-\x7F]/, "", $i)    # Removing non-ASCII characters
        gsub(/,/, ".", $i)              # Changing comma to dot for decimal
        if (NR > 1 && $i == "") {
            $i = 0                     # Filling empty fields with 0
        }
    }

    # Cleaned header, printing with tab characters
    if (NR == 1) {
        for (i = 1; i <= NF; i++) {
            printf "%s", $i
            if (i < NF) printf OFS
        }
        printf "\n"
        next
    }

    # Assign new ID if any row in ID is empty, 0 or not a integer
    if ($1 == "" || $1 == 0 || $1 !~ /^[0-9]+$/) {
        $1 = next_id++
    }

    # Skip duplicate IDs to ensure uniqueness
    if ($1 in seen) {
        next
    }

    seen[$1] = 1

    # Print cleaned rows
    for (i = 1; i <= NF; i++) {
        printf "%s", $i
        if (i < NF) printf OFS
    }
    printf "\n"
}
' "$input"
